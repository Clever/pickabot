// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/NathanLeiby/go/src/github.com/Clever/pickabot/slackapi/SlackService.go

package main

import (
	gomock "github.com/golang/mock/gomock"
	slack "github.com/nlopes/slack"
	reflect "reflect"
)

// MockSlackAPIService is a mock of SlackAPIService interface
type MockSlackAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockSlackAPIServiceMockRecorder
}

// MockSlackAPIServiceMockRecorder is the mock recorder for MockSlackAPIService
type MockSlackAPIServiceMockRecorder struct {
	mock *MockSlackAPIService
}

// NewMockSlackAPIService creates a new mock instance
func NewMockSlackAPIService(ctrl *gomock.Controller) *MockSlackAPIService {
	mock := &MockSlackAPIService{ctrl: ctrl}
	mock.recorder = &MockSlackAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSlackAPIService) EXPECT() *MockSlackAPIServiceMockRecorder {
	return _m.recorder
}

// GetUserInfo mocks base method
func (_m *MockSlackAPIService) GetUserInfo(user string) (*slack.User, error) {
	ret := _m.ctrl.Call(_m, "GetUserInfo", user)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo
func (_mr *MockSlackAPIServiceMockRecorder) GetUserInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetUserInfo", reflect.TypeOf((*MockSlackAPIService)(nil).GetUserInfo), arg0)
}

// GetChannelInfo mocks base method
func (_m *MockSlackAPIService) GetChannelInfo(channel string) (*slack.Channel, error) {
	ret := _m.ctrl.Call(_m, "GetChannelInfo", channel)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelInfo indicates an expected call of GetChannelInfo
func (_mr *MockSlackAPIServiceMockRecorder) GetChannelInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetChannelInfo", reflect.TypeOf((*MockSlackAPIService)(nil).GetChannelInfo), arg0)
}

// NewRTM mocks base method
func (_m *MockSlackAPIService) NewRTM() *slack.RTM {
	ret := _m.ctrl.Call(_m, "NewRTM")
	ret0, _ := ret[0].(*slack.RTM)
	return ret0
}

// NewRTM indicates an expected call of NewRTM
func (_mr *MockSlackAPIServiceMockRecorder) NewRTM() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewRTM", reflect.TypeOf((*MockSlackAPIService)(nil).NewRTM))
}

// MockSlackRTMService is a mock of SlackRTMService interface
type MockSlackRTMService struct {
	ctrl     *gomock.Controller
	recorder *MockSlackRTMServiceMockRecorder
}

// MockSlackRTMServiceMockRecorder is the mock recorder for MockSlackRTMService
type MockSlackRTMServiceMockRecorder struct {
	mock *MockSlackRTMService
}

// NewMockSlackRTMService creates a new mock instance
func NewMockSlackRTMService(ctrl *gomock.Controller) *MockSlackRTMService {
	mock := &MockSlackRTMService{ctrl: ctrl}
	mock.recorder = &MockSlackRTMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSlackRTMService) EXPECT() *MockSlackRTMServiceMockRecorder {
	return _m.recorder
}

// NewOutgoingMessage mocks base method
func (_m *MockSlackRTMService) NewOutgoingMessage(text string, channel string) *slack.OutgoingMessage {
	ret := _m.ctrl.Call(_m, "NewOutgoingMessage", text, channel)
	ret0, _ := ret[0].(*slack.OutgoingMessage)
	return ret0
}

// NewOutgoingMessage indicates an expected call of NewOutgoingMessage
func (_mr *MockSlackRTMServiceMockRecorder) NewOutgoingMessage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewOutgoingMessage", reflect.TypeOf((*MockSlackRTMService)(nil).NewOutgoingMessage), arg0, arg1)
}

// SendMessage mocks base method
func (_m *MockSlackRTMService) SendMessage(msg *slack.OutgoingMessage) {
	_m.ctrl.Call(_m, "SendMessage", msg)
}

// SendMessage indicates an expected call of SendMessage
func (_mr *MockSlackRTMServiceMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMessage", reflect.TypeOf((*MockSlackRTMService)(nil).SendMessage), arg0)
}
