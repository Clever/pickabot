// Code generated by MockGen. DO NOT EDIT.
// Source: slackapi/SlackService.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
)

// MockSlackAPIService is a mock of SlackAPIService interface.
type MockSlackAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockSlackAPIServiceMockRecorder
}

// MockSlackAPIServiceMockRecorder is the mock recorder for MockSlackAPIService.
type MockSlackAPIServiceMockRecorder struct {
	mock *MockSlackAPIService
}

// NewMockSlackAPIService creates a new mock instance.
func NewMockSlackAPIService(ctrl *gomock.Controller) *MockSlackAPIService {
	mock := &MockSlackAPIService{ctrl: ctrl}
	mock.recorder = &MockSlackAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackAPIService) EXPECT() *MockSlackAPIServiceMockRecorder {
	return m.recorder
}

// GetAPI mocks base method.
func (m *MockSlackAPIService) GetAPI() *slack.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPI")
	ret0, _ := ret[0].(*slack.Client)
	return ret0
}

// GetAPI indicates an expected call of GetAPI.
func (mr *MockSlackAPIServiceMockRecorder) GetAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPI", reflect.TypeOf((*MockSlackAPIService)(nil).GetAPI))
}

// GetUserInfo mocks base method.
func (m *MockSlackAPIService) GetUserInfo(user string) (*slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", user)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockSlackAPIServiceMockRecorder) GetUserInfo(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockSlackAPIService)(nil).GetUserInfo), user)
}

// MockSlackEventsService is a mock of SlackEventsService interface.
type MockSlackEventsService struct {
	ctrl     *gomock.Controller
	recorder *MockSlackEventsServiceMockRecorder
}

// MockSlackEventsServiceMockRecorder is the mock recorder for MockSlackEventsService.
type MockSlackEventsServiceMockRecorder struct {
	mock *MockSlackEventsService
}

// NewMockSlackEventsService creates a new mock instance.
func NewMockSlackEventsService(ctrl *gomock.Controller) *MockSlackEventsService {
	mock := &MockSlackEventsService{ctrl: ctrl}
	mock.recorder = &MockSlackEventsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackEventsService) EXPECT() *MockSlackEventsServiceMockRecorder {
	return m.recorder
}

// PostMessage mocks base method.
func (m *MockSlackEventsService) PostMessage(channel, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", channel, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockSlackEventsServiceMockRecorder) PostMessage(channel, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockSlackEventsService)(nil).PostMessage), channel, text)
}
