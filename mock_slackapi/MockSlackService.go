// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/Clever/pickabot/slackapi (interfaces: SlackAPIService,SlackRTMService)

package mock_slackapi

import (
	gomock "github.com/golang/mock/gomock"
	"github.com/nlopes/slack"
)

// Mock of SlackAPIService interface
type MockSlackAPIService struct {
	ctrl     *gomock.Controller
	recorder *_MockSlackAPIServiceRecorder
}

// Recorder for MockSlackAPIService (not exported)
type _MockSlackAPIServiceRecorder struct {
	mock *MockSlackAPIService
}

func NewMockSlackAPIService(ctrl *gomock.Controller) *MockSlackAPIService {
	mock := &MockSlackAPIService{ctrl: ctrl}
	mock.recorder = &_MockSlackAPIServiceRecorder{mock}
	return mock
}

func (_m *MockSlackAPIService) EXPECT() *_MockSlackAPIServiceRecorder {
	return _m.recorder
}

func (_m *MockSlackAPIService) GetChannelInfo(_param0 string) (*slack.Channel, error) {
	ret := _m.ctrl.Call(_m, "GetChannelInfo", _param0)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSlackAPIServiceRecorder) GetChannelInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetChannelInfo", arg0)
}

func (_m *MockSlackAPIService) GetUserInfo(_param0 string) (*slack.User, error) {
	ret := _m.ctrl.Call(_m, "GetUserInfo", _param0)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSlackAPIServiceRecorder) GetUserInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserInfo", arg0)
}

func (_m *MockSlackAPIService) NewRTM() *slack.RTM {
	ret := _m.ctrl.Call(_m, "NewRTM")
	ret0, _ := ret[0].(*slack.RTM)
	return ret0
}

func (_mr *_MockSlackAPIServiceRecorder) NewRTM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewRTM")
}

// Mock of SlackRTMService interface
type MockSlackRTMService struct {
	ctrl     *gomock.Controller
	recorder *_MockSlackRTMServiceRecorder
}

// Recorder for MockSlackRTMService (not exported)
type _MockSlackRTMServiceRecorder struct {
	mock *MockSlackRTMService
}

func NewMockSlackRTMService(ctrl *gomock.Controller) *MockSlackRTMService {
	mock := &MockSlackRTMService{ctrl: ctrl}
	mock.recorder = &_MockSlackRTMServiceRecorder{mock}
	return mock
}

func (_m *MockSlackRTMService) EXPECT() *_MockSlackRTMServiceRecorder {
	return _m.recorder
}

func (_m *MockSlackRTMService) NewOutgoingMessage(_param0 string, _param1 string) *slack.OutgoingMessage {
	ret := _m.ctrl.Call(_m, "NewOutgoingMessage", _param0, _param1)
	ret0, _ := ret[0].(*slack.OutgoingMessage)
	return ret0
}

func (_mr *_MockSlackRTMServiceRecorder) NewOutgoingMessage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewOutgoingMessage", arg0, arg1)
}

func (_m *MockSlackRTMService) SendMessage(_param0 *slack.OutgoingMessage) {
	_m.ctrl.Call(_m, "SendMessage", _param0)
}

func (_mr *_MockSlackRTMServiceRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendMessage", arg0)
}
