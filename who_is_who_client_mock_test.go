// Code generated by MockGen. DO NOT EDIT.
// Source: who_is_who_client_iface.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	whoswho "github.com/Clever/who-is-who/go-client"
	gomock "github.com/golang/mock/gomock"
)

// MockwhoIsWhoClientIface is a mock of whoIsWhoClientIface interface.
type MockwhoIsWhoClientIface struct {
	ctrl     *gomock.Controller
	recorder *MockwhoIsWhoClientIfaceMockRecorder
}

// MockwhoIsWhoClientIfaceMockRecorder is the mock recorder for MockwhoIsWhoClientIface.
type MockwhoIsWhoClientIfaceMockRecorder struct {
	mock *MockwhoIsWhoClientIface
}

// NewMockwhoIsWhoClientIface creates a new mock instance.
func NewMockwhoIsWhoClientIface(ctrl *gomock.Controller) *MockwhoIsWhoClientIface {
	mock := &MockwhoIsWhoClientIface{ctrl: ctrl}
	mock.recorder = &MockwhoIsWhoClientIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwhoIsWhoClientIface) EXPECT() *MockwhoIsWhoClientIfaceMockRecorder {
	return m.recorder
}

// GetUserList mocks base method.
func (m *MockwhoIsWhoClientIface) GetUserList() ([]whoswho.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList")
	ret0, _ := ret[0].([]whoswho.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockwhoIsWhoClientIfaceMockRecorder) GetUserList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockwhoIsWhoClientIface)(nil).GetUserList))
}

// UpsertUser mocks base method.
func (m *MockwhoIsWhoClientIface) UpsertUser(arg0 string, arg1 whoswho.User) (whoswho.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", arg0, arg1)
	ret0, _ := ret[0].(whoswho.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockwhoIsWhoClientIfaceMockRecorder) UpsertUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockwhoIsWhoClientIface)(nil).UpsertUser), arg0, arg1)
}

// UserBySlackID mocks base method.
func (m *MockwhoIsWhoClientIface) UserBySlackID(arg0 string) (whoswho.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBySlackID", arg0)
	ret0, _ := ret[0].(whoswho.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserBySlackID indicates an expected call of UserBySlackID.
func (mr *MockwhoIsWhoClientIfaceMockRecorder) UserBySlackID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBySlackID", reflect.TypeOf((*MockwhoIsWhoClientIface)(nil).UserBySlackID), arg0)
}
